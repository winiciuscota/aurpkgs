#!/bin/sh

_vgmplay_help() {
cat <<EOF
Usage: vgmplay [options] filename
Plays VGM, VGZ, CMF, and DRO files either singly or by m3u playlist.

Options:
 -h, -?, --help               display this help and exit
 -c <file>,
         --config=<file>      load alternate config file

 -a,     --aoss               force use of aoss (ALSA's OSS wrapper)
 -o,     --oss                force use of OSS (native OSS, ossp)
 -p,     --padsp              force use of padsp (PulseAudio's OSS wrapper)
 -s <server>,
         --paserver=<server>  set alternate PulseAudio server (implies --padsp)

         --version            display VGMPlay and VGM Format versions and exit

Keys (In-Player):
 Left/Right                   Seek 5 seconds backward/forward
 Ctrl + Left/Right            Seek 60 seconds backward/forward
 Space                        Pause
 Escape twice                 Quit Program
 F                            Fade Out Current Track   
 R                            Restart Current Track
 PageUp/B                     Previous Track (in playlist)
 PageDown/N                   Next Track (in playlist)
EOF
}

_vgmplay_error() {
	case $1 in
		no_config_arg )
			echo "vgmplay: file required for --config option" >&2
			exit 22 ;;
		config_error )
			echo "vgmplay: failed to copy alternate config" >&2
			exit 2 ;;
		no_paserver_arg )
			echo "vgmplay: server required for --paserver option " >&2
			exit 22 ;;
		too_many_outputs )
			echo "vgmplay: can only force one output type" >&2
			exit 22 ;;
		no_music_file_arg )
			echo "vgmplay: no music file specified" >&2
			exit 22 ;;
		invalid_music_file )
			echo "vgmplay: music file must be VGM, VGZ, CMF, DRO, or M3U" >&2
			exit 22 ;;
		not_found_music_file )
			echo "vgmplay: $2 not found" >&2
			exit 2 ;;
		unknown_option )
			echo "vgmplay: unknown option $2 ignored" >&2 ;;
		no_config_found )
			echo "vgmplay: no config file found" >&2 ;;
	esac
}
	
_pwd="$PWD"
_force_padsp=0
_force_aoss=0
_force_oss=0
_config_path=""
_config_path_temp=""
_config_arg=""
_pulse_server=""

while :
do
	case $1 in
		-h | -\? | --help )
			_vgmplay_help
			exit 0 ;;
		-c | --config )
			if [ -n "$2" ]; then
				_config_arg="$2"
				shift 2
			else
				_vgmplay_error no_config_arg
			fi ;;
		--config=* )
			_config_arg="${1#*=}"
			if [ -z "$_config_arg" ]; then
				_vgmplay_error no_config_arg
			fi
			shift ;;
		-a | --aoss )
			if [ "$_force_padsp" -eq "0" ] && [ "$_force_oss" -eq "0" ]; then
				_force_aoss="1"
				shift
			else
				_vgmplay_error too_many_outputs
			fi ;;
		-o | --oss )
			if [ "$_force_padsp" -eq "0" ] && [ "$_force_aoss" -eq "0" ]; then
				_force_oss="1"
				shift
			else
				_vgmplay_error too_many_outputs
			fi ;;
		-p | --padsp )			
			if [ "$_force_aoss" -eq "0" ] && [ "$_force_oss" -eq "0" ]; then
				_force_padsp="1"
				shift
			else
				_vgmplay_error too_many_outputs
			fi ;;
		-s | --paserver )
			if [ "$_force_aoss" -eq "0" ] && [ "$_force_oss" -eq "0" ]; then
				_force_padsp="1"
			else
				_vgmplay_error too_many_outputs
			fi

			if [ -n "$2" ]; then
				_pulse_server="$2"
				shift 2
			else
				_vgmplay_error no_paserver_arg
			fi ;;
		--paserver=* )
			if [ "$_force_aoss" -eq "0" ] && [ "$_force_oss" -eq "0" ]; then
				_force_padsp="1"
			else
				_vgmplay_error too_many_outputs
			fi
			
			_pulse_server="${1#*=}"
			if [ -z "$_pulse_server" ]; then
				_vgmplay_error no_paserver_arg
			fi
			shift ;;
		-* )
			_vgmplay_error unknown_option "$1"
			shift ;;
		-- )
			shift
			break ;;
		* )
			break ;;
	esac
done

if [ -z "$_config_arg" ]; then
	if [ -r "$XDG_CONFIG_HOME/vgmplay/VGMPlay.ini" ]; then
		_config_path="$XDG_CONFIG_HOME/vgmplay"
	elif [ -r "$XDG_CONFIG_DIRS/vgmplay/VGMPlay.ini" ]; then
		_config_path="$XDG_CONFIG_DIRS/vgmplay"
	elif [ ! -r "$PWD/VGMPlay.ini" ]; then
		_vgmplay_error no_config_found
	fi
else
	_config_path_temp="$(mktemp -d)"
	cp "$_config_arg" "$_config_path_temp/VGMPlay.ini" || _vgmplay_error config_error
	_config_path="$_config_path_temp"
fi

echo "$_pwd $_config_arg $_config_path $_config_path_temp $_force_aoss $_force_padsp $_force_oss $_pulse_server"

trap 'rm -rf "$_config_path_temp"' EXIT
trap 'rm -rf "$_config_path_temp ; exit 1' HUP INT QUIT TERM
